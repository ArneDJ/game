#version 430 core

// input
layout (rgba32f, binding = 0) uniform image2D EROSIONMAP_READ;
layout (rgba32f, binding = 1) uniform image2D FLUXMAP_READ;
// output
layout (rgba32f, binding = 2) uniform image2D FLUXMAP_WRITE;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform float TIME;
uniform int WIDTH;
uniform int HEIGHT;

void main(void)
{
	float g = 0.80; // gravity
	float pipelen = 1.0; 
	//float A = pipelen * pipelen; // pipe area
	float A = 1.0; // pipe area

	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

	// height data
	vec4 top = imageLoad(EROSIONMAP_READ, uv + ivec2(0, 1));
	vec4 right = imageLoad(EROSIONMAP_READ, uv + ivec2(1, 0));
	vec4 bottom = imageLoad(EROSIONMAP_READ, uv + ivec2(0, -1));
	vec4 left = imageLoad(EROSIONMAP_READ, uv + ivec2(-1, 0));

	vec4 erosion = imageLoad(EROSIONMAP_READ, uv);
	vec4 flux = imageLoad(FLUXMAP_READ, uv);

	float waterheight = erosion.r + erosion.g;
	/*
	float heighttop = (erosion.y+erosion.x + erosion.b)-(top.y+top.x + top.b);
	float heightright = (erosion.y+erosion.x+erosion.b)-(right.y+right.x+right.b);
	float heightbottom = (erosion.y+erosion.x+erosion.b)-(bottom.x+bottom.y+bottom.b);
	float heightleft = (erosion.y+erosion.x+erosion.b)-(left.y+left.x+left.b);
	*/
	float heighttop = waterheight - (top.y + top.x);
	float heightright = waterheight - (right.y + right.x);
	float heightbottom = waterheight - (bottom.x + bottom.y);
	float heightleft = waterheight - (left.y + left.x);

	// compute the outgoing amount of water from the current cell to the neighbors (in each direction)
	// out flux map
	float ftopout = max(0.f, flux.x+(TIME*g*A*heighttop)/pipelen);
	float frightout = max(0.f, flux.y+(TIME*g*A*heightright)/pipelen);
	float fbottomout = max(0.f, flux.z+(TIME*g*A*heightbottom)/pipelen);
	float fleftout = max(0.f, flux.w+(TIME*g*A*heightleft)/pipelen);

	// k - is a special scaling factor to prevent situations when total outflow in 4 directions is higher than water volume in cell (since each direction is computed independently). Thus k is defined to split the scale the outflow accordingly 
	float damping = 0.9999;
//float k = min(1.f,((erosion.y )*pipelen*pipelen)/(TIME*(ftopout+frightout+fbottomout+fleftout))) * damping;
	float k = min(1.f,((erosion.y )*pipelen*pipelen)/(TIME*(ftopout+frightout+fbottomout+fleftout)));
	// adjust flux with scaling factor k to avoid negative updated water height
	ftopout *= k;
	frightout *= k;
	fbottomout *= k;
	fleftout *= k;

	// If we need the water to bounce off the walls we need to disable outgouing flow at the boundaries:
	if (uv.x >= WIDTH-1 || uv.x <= 0 || uv.y >= HEIGHT-1 || uv.y <= 0) {
		ftopout = 0.0;
		frightout = 0.0;
		fbottomout = 0.0;
		fleftout = 0.0;
	}

	vec4 color = vec4(ftopout, frightout, fbottomout, fleftout);

	imageStore(FLUXMAP_WRITE, uv, color);
}

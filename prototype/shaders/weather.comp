#version 430

// Code from https://github.com/NadirRoGue
// Special thanks to Nadir Román Guerrero

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (rgba8, binding = 0) uniform image2D OUTPUT;

uniform vec3 SEED;
uniform float PERLIN_FREQ = 0.8;
uniform float PERLIN_SCALE = 100.0;

float random2D(in vec2 st) 
{
    return fract( sin(dot( st.xy, vec2(12.9898,78.233 ) + SEED.xy ) ) * 43758.5453123);
}

float nerp(in vec2 i_coord, in float i_size)
{
	vec2 grid = i_coord * i_size;

	vec2 randomInput = floor(grid);
	vec2 weights = fract(grid);

	float p0 = random2D(randomInput);
	float p1 = random2D(randomInput + vec2(1.0, 0.0));
	float p2 = random2D(randomInput + vec2(0.0, 1.0));
	float p3 = random2D(randomInput + vec2(1.0, 1.0));

	weights = smoothstep(vec2(0.0, 0.0), vec2(1.0, 1.0), weights); 

	return p0 + (p1 - p0) * weights.x + (p2 - p0) * weights.y * (1.0 - weights.x) + (p3 - p1) * (weights.y * weights.x);    
}

float perlinNoise(vec2 uv, float sc, float f, float a, int o)
{
	float val = 0.0;

	float amp = a;
	float freq = f;

	for (int i = 0; i < o; i++) {
		val += nerp(uv, sc * freq) * amp;
		amp *= 0.25;
		freq *= 3.0;
	}    

	return val * val;
}

void main(void)
{
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

	vec2 uv = vec2(float(pixel.x + 2.0) / 1024.0, float(pixel.y) / 1024.0);
	vec2 suv = vec2(uv.x + 5.5, uv.y + 5.5);

	float cloudType = clamp(perlinNoise(suv, PERLIN_SCALE*3.0, 0.3, 0.7,10), 0.0, 1.0);

	float coverage = perlinNoise(uv, PERLIN_SCALE*0.95, PERLIN_FREQ, 0.5, 4);
	vec4 weather = vec4(clamp(coverage, 0, 1), cloudType, 0, 1);

	imageStore(OUTPUT, pixel, weather);
}
